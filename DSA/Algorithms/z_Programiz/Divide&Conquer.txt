A divide and conquer algorithm is a strategy of solving a large problem by

-breaking the problem into smaller sub-problems
-solving the sub-problems, and
-combining them to get the desired output.

To use the divide and conquer algorithm, recursion is used.

==========================================================================================

Here are the steps involved:

Divide: Divide the given problem into sub-problems using recursion.
Conquer: Solve the smaller sub-problems recursively. If the subproblem is small enough, then solve it directly.
Combine: Combine the solutions of the sub-problems that are part of the recursive process to solve the actual problem.

==========================================================================================

Advantages of Divide and Conquer Algorithm
- The complexity for the multiplication of two matrices using the naive method is O(n3), whereas using the divide and conquer approach (i.e. Strassen's matrix multiplication) is O(n2.8074). This approach also simplifies other problems, such as the Tower of Hanoi.
- This approach is suitable for multiprocessing systems.
- It makes efficient use of memory caches.


Divide and Conquer Applications-
	Binary Search
	Merge Sort
	Quick Sort
	Strassen's Matrix multiplication
	Karatsuba Algorithm

==========================================================================================



Divide and Conquer Vs Dynamic programming
------------------------------------------

The divide and conquer approach divides a problem into smaller subproblems; these subproblems are further solved recursively. The result of each subproblem is not stored for future reference, whereas, in a dynamic approach, the result of each subproblem is stored for future reference.

Use the divide and conquer approach when the same subproblem is not solved multiple times. Use the dynamic approach when the result of a subproblem is to be used multiple times in the future.


Suppose we are trying to find the Fibonacci series. Then,

Divide and Conquer approach:

fib(n)
    If n < 2, return 1
    Else , return f(n - 1) + f(n -2)


Dynamic approach:

mem = []
fib(n)
    If n in mem: return mem[n] 
    else,     
        If n < 2, f = 1
        else , f = f(n - 1) + f(n -2)
        mem[n] = f
        return f
In a dynamic approach, mem stores the result of each subproblem.

